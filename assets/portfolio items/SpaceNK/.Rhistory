str_remove_all("\\b[N|C|W]\\b") %>%
str_remove_all("^N\\+.*")
View(foundation_words)
foundation_words$ShadeWords <- foundation_words$ShadeWords %>%
str_remove_all("\\b[N|C|W]\\b") %>% # Remove standalone "N", "C", "W"
str_remove_all("^N\\+\\s.*")
View(foundation_words)
View(foundation_words)
foundation_words$ShadeWords <- foundation_words$ShadeWords %>%
str_remove_all("\\b[N|C|W]\\b") %>% # Remove standalone "N", "C", "W"
str_remove_all("^N\\+\\s.*")%>%    # Remove strings starting with "N+ " (space included)
str_squish()
View(foundation_words)
foundation_words$ShadeWords <- foundation_words$ShadeWords %>%
str_remove_all("\\b[N|C|W]\\b") %>%  # Remove standalone "N", "C", "W"
str_remove_all("N\\+\\s*") %>%       # Remove "N+" and any spaces following it
str_squish()
View(foundation_words)
foundation_words$ShadeWords <- foundation_words$ShadeWords %>%
str_remove_all("\\b[N|C|W]\\b") %>%  # Remove standalone "N", "C", "W"
str_remove_all("N\\+\\s*") %>%       # Remove "N+" and any spaces following it
str_squish()
View(foundation_words)
#some shades have standalone letters like "N" or "C" before the name, which stand for neutral or cool, which i decided to remove
foundation_words$ShadeWords <- foundation_words$ShadeWords %>%
str_remove_all("\\b[N|C|W|B]\\b") %>%  # Remove standalone "N", "C", "W"
str_remove_all("N\\+\\s*") %>%       # Remove "N+" and any spaces following it
str_squish()
View(foundation_words)
foundation_words$ShadeWords <- foundation_words$ShadeWords %>%
str_remove_all("\\b[N|C|W|B|+]\\b") %>%  # Remove standalone "N", "C", "W"
str_remove_all("N\\+\\s*") %>%       # Remove "N+" and any spaces following it
str_squish()
View(foundation_words)
foundation_words$ShadeWords <- foundation_words$ShadeWords %>%
str_remove_all("\\b[N|C|W|B|ST]\\b") %>%  # Remove standalone "N", "C", "W"
str_remove_all("N\\+\\s*") %>%       # Remove "N+" and any spaces following it
str_squish()
foundation_words$ShadeWords <- foundation_words$ShadeWords %>%
str_remove_all("\\b[N|C|W|B|O]\\b") %>%  # Remove standalone "N", "C", "W"
str_remove_all("N\\+\\s*") %>%       # Remove "N+" and any spaces following it
str_squish()
foundation_words <- foundation %>%
mutate(
ShadeWords = str_remove_all(ShadeName, "\\d+\\.\\d+|\\d+"),
ShadeWords = na_if(ShadeWords, "")
) %>%
na.omit() %>%
select(-ShadeName)
#cleaning the foundation_words dataframe
#these were brands that did not use words for their shades but still had words, e.g. 'SHADE 1'
foundation_words <- foundation_words[!grepl("Charlotte|Anastasia|Glossier|Terry|Lisa|KOSAS|ROSE|MONIKA|RARE|KEVYN|WESTMAN",
foundation_words$Brand, ignore.case = TRUE), ]
#this product were named 'SHADE 1' , 'SHADE 2' and was therefore removed as it is a number based system
foundation_words <- foundation_words[!grepl("ReEvolve Natural Finish Foundation",
foundation_words$ProductName, ignore.case = TRUE), ]
View(foundation_words)
foundation_words$ShadeWords <- foundation_words$ShadeWords %>%
str_remove_all("\\b[N|C|W|B|O]\\b") %>%  # Remove standalone "N", "C", "W"
str_squish()
foundation_words$ShadeWords <- foundation_words$ShadeWords %>%
str_remove_all("\\b[N|C|W|B|O|+]\\b") %>%  # Remove standalone "N", "C", "W"
str_squish()
foundation_words$ShadeWords <- foundation_words$ShadeWords %>%
str_remove_all("\\b[N|C|W|B|O]\\b") %>%
str_remove_all("\\+") %>%
str_squish()
foundation_words$ShadeWords <- foundation_words$ShadeWords %>%
str_remove_all("\\b[N|C|W|B|O|R]\\b") %>%
str_remove_all("\\+\\.") %>%
str_squish()
#some shades have standalone letters like "N" or "C" before the name, which stand for neutral or cool, which i decided to remove
foundation_words$ShadeWords <- foundation_words$ShadeWords %>%
str_remove_all("\\b[N|C|W|B|O|R]\\b") %>%
str_remove_all("\\bSF\\b|\\bNR\\b|\\bST\\b|\\bOB\\b|\\bOC\\b|\\bOR\\b|\\bFE\\b") %>%
str_remove_all("\\+\\.") %>%
str_squish()
#some shades have standalone letters like "N" or "C" before the name, which stand for neutral or cool, which i decided to remove
foundation_words$ShadeWords <- foundation_words$ShadeWords %>%
str_remove_all("\\b[N|C|W|B|O|R]\\b") %>%
str_remove_all("\\bSF\\b|\\bNR\\b|\\bST\\b|\\bOB\\b|\\bOC\\b|\\bOR\\b|\\bFE\\b") %>%
str_remove_all("[\\+\\.]") %>%
str_squish()
write.csv(foundation_words, "foundation_words.csv")
runApp('foundation')
runApp('foundation')
runApp('foundation')
View(foundation_words)
runApp('foundation')
runApp('foundation')
runApp('foundation')
runApp('foundation')
min(foundation_words$L)
runApp('foundation')
runApp('foundation')
runApp('foundation')
runApp('foundation')
runApp('foundation')
?icon
runApp('foundation')
ui <- dashboardPage(
dashboardHeader(title = "Foundation Shades Dashboard"),
dashboardSidebar(
sidebarMenu(
menuItem("All Shades", tabName = "allshades", icon = ("chart-bar")),
menuItem("Shade Numbering", tabName = "shadenumbers", icon = ("table")),
menuItem("Shade Names", tabName = "shadenames", icon = icon("cloud"))
)
),
dashboardBody(
tabItems(
#tab for all shade viz
tabItem(tabName = "allshades",
h2("All Shades"),
sliderInput("lightness", "Select Lightness Range:",
min = min(foundation$L),
max = max(foundation$L),
value = c(min(foundation$L, max(foundation$L)),
step = 0.01),
plotOutput("allshades")
)),
#tab for shade numbering system viz
tabItem(tabName = "shadenumbers",
h2("Shade Numbering"),
tableOutput("shadenumbers")
),
#tab for shade names viz
tabItem(tabName = "shadenames",
h2("Shade Names"),
sliderInput("lightness", "Select Lightness Range:",
min = min(foundation$L),
max = max(foundation$L),
value = c(min(foundation$L, max(foundation$L)),
step = 0.01),
wordcloud2Output("shadenames")))
)
)
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
pacman::p_load(shiny,shinydashboard,ggplot2,dplr,wordcloud2())
runApp('foundation')
runApp('foundation')
runApp('foundation')
runApp('foundation')
runApp('foundation')
runApp('foundation')
runApp('foundation')
runApp('foundation')
View(foundation)
runApp('foundation')
runApp('foundation')
runApp('foundation')
runApp('foundation')
runApp('foundation')
runApp('foundation')
runApp('foundation')
runApp('foundation')
runApp('foundation')
runApp('foundation')
runApp('foundation')
runApp('foundation')
runApp('foundation')
runApp('foundation')
runApp('foundation')
View(foundation)
View(foundation_numbers)
runApp('foundation')
class(foundation_numbers$ShadeNumber)
runApp('foundation')
runApp('foundation')
runApp('foundation')
runApp('foundation')
runApp('foundation')
runApp('foundation')
View(foundation)
runApp('foundation')
runApp('foundation')
View(foundation_words)
runApp('foundation')
runApp('foundation')
runApp('foundation')
runApp('foundation')
runApp('foundation')
runApp('foundation')
runApp('foundation')
runApp('foundation')
runApp('foundation')
runApp('foundation')
runApp('foundation')
runApp('foundation')
runApp('foundation')
View(foundation_numbers)
View(foundation)
runApp('foundation')
runApp('foundation')
runApp('foundation')
runApp('foundation')
runApp('foundation')
runApp('foundation')
runApp('foundation')
runApp('foundation')
runApp('foundation')
runApp('foundation')
runApp('foundation')
runApp('foundation')
runApp('foundation')
runApp('foundation')
View(foundation_numbers)
runApp('foundation')
runApp('foundation')
View(foundation_words)
runApp('foundation')
runApp('foundation')
runApp('foundation')
str(foundation_words)
View(foundation)
runApp('foundation')
print(class(foundation_words$L))
print(class(foundation_words$ShadeWords))
runApp('foundation')
runApp('foundation')
runApp('foundation')
runApp('foundation')
runApp('foundation')
runApp('foundation')
runApp('foundation')
runApp('foundation')
runApp('foundation')
runApp('foundation')
runApp('foundation')
runApp('foundation')
runApp('foundation')
runApp('foundation')
runApp('foundation')
runApp('foundation')
runApp('foundation')
runApp('foundation')
runApp('foundation')
runApp('foundation')
runApp('foundation')
runApp('foundation')
runApp('foundation')
runApp('foundation')
runApp('foundation')
runApp('foundation')
runApp('foundation')
runApp('foundation')
test<-foundation_words%>%ShadeColour = last(ShadeColour)
foundation_words$ShadeColour
test<-foundation_words$ShadeColour = last(ShadeColour)
foundation_words$ShadeColour = last(ShadeColour)
runApp('foundation')
runApp('foundation')
runApp('foundation')
runApp('foundation')
rm(list=ls())
pacman::p_load(
dplyr,
plotwidgets,
stringr)
foundation<- read.csv("foundation_data.csv")
foundation <- foundation %>% select(-X) %>% na.omit()
foundation$ShadeName <- trimws(gsub("30 ML|30ML|32 ML", "", foundation$ShadeName))
#there were refills and travel sized products which are the same as full sized ones so i removed them as they're duplicates
foundation <- foundation[!grepl("refill|mini", foundation$ProductName, ignore.case = TRUE), ]
#had to convert to RGB first and then HSL
rgb_values <- col2rgb(foundation$ShadeColour)
hsl_values <-rgb2hsl(rgb_values)
foundation$L <- hsl_values[3,]
foundation_numbers <- foundation %>%
mutate(
ShadeNumber = str_extract(ShadeName, "\\d+\\.\\d+|\\d+")
) %>% na.omit() %>%
select(-ShadeName)
foundation_words <- foundation %>%
mutate(
ShadeWords = str_remove_all(ShadeName, "\\d+\\.\\d+|\\d+"),
ShadeWords = na_if(ShadeWords, "")
) %>%
na.omit() %>%
select(-ShadeName)
#cleaning the foundation_words dataframe
#these were brands that did not use words for their shades but still had words, e.g. 'SHADE 1'
foundation_words <- foundation_words[!grepl("Charlotte|Anastasia|Glossier|Terry|Lisa|KOSAS|ROSE|MONIKA|RARE|KEVYN|WESTMAN",
foundation_words$Brand, ignore.case = TRUE), ]
#this product were named 'SHADE 1' , 'SHADE 2' and was therefore removed as it is a number based system
foundation_words <- foundation_words[!grepl("ReEvolve Natural Finish Foundation",
foundation_words$ProductName, ignore.case = TRUE), ]
#some shades have standalone letters like "N" or "C" before the name, which stand for neutral or cool, which i decided to remove
foundation_words$ShadeWords <- foundation_words$ShadeWords %>%
str_remove_all("\\b[N|C|W|B|O|R]\\b") %>%
str_remove_all("\\bSF\\b|\\bNR\\b|\\bST\\b|\\bOB\\b|\\bOC\\b|\\bOR\\b|\\bFE\\b") %>%
str_remove_all("[\\+\\.]") %>%
str_squish()
View(foundation)
View(foundation_numbers)
View(foundation_words)
runApp('foundation')
runApp('foundation')
runApp('foundation')
runApp('foundation')
runApp('foundation')
runApp('foundation')
runApp('foundation')
runApp('foundation')
runApp('foundation')
runApp('foundation')
print(word_freq)
runApp('foundation')
runApp('foundation')
runApp('foundation')
runApp('foundation')
runApp('foundation')
View(foundation_words)
rm(list=ls())
pacman::p_load(
dplyr,
plotwidgets,
stringr)
foundation<- read.csv("foundation_data.csv")
foundation <- foundation %>% select(-X) %>% na.omit()
View(foundation)
foundation$ShadeName <- trimws(gsub("30 ML|30ML|32 ML", "", foundation$ShadeName))
foundation <- foundation[!grepl("refill|mini", foundation$ProductName, ignore.case = TRUE), ]
rgb_values <- col2rgb(foundation$ShadeColour)
hsl_values <-rgb2hsl(rgb_values)
foundation$L <- hsl_values[3,]
View(foundation)
foundation_words <- foundation %>%
mutate(
#removing all numbers in the shade name
ShadeWords = str_remove_all(ShadeName, "\\d+\\.\\d+|\\d+"),
#shade names with just numbers will be coded as NA and removed from dataframe
ShadeWords = na_if(ShadeWords, "")
) %>%
na.omit() %>%
select(-ShadeName)
#cleaning the foundation_words dataframe
#these were brands that did not use words to describe their shades but still had words, e.g. 'SHADE 1'
foundation_words <- foundation_words[!grepl("Charlotte|Anastasia|Glossier|Terry|Lisa|KOSAS|ROSE|MONIKA|RARE|KEVYN|WESTMAN",
foundation_words$Brand, ignore.case = TRUE), ]
#this product was named 'SHADE 1' , 'SHADE 2' and was therefore removed as it is a number based system
foundation_words <- foundation_words[!grepl("ReEvolve Natural Finish Foundation",
foundation_words$ProductName, ignore.case = TRUE), ]
#some shades have standalone letters like "N" or "C" before the name, which stand for neutral or cool, which i decided to remove
foundation_words$ShadeWords <- foundation_words$ShadeWords %>%
str_remove_all("\\b[N|C|W|B|O|R]\\b") %>%
str_remove_all("\\bSF\\b|\\bNR\\b|\\bST\\b|\\bOB\\b|\\bOC\\b|\\bOR\\b|\\bFE\\b") %>%
str_remove_all("[\\+\\.]") %>%
str_squish()
View(foundation_words)
runApp('foundation')
runApp('foundation')
View(foundation_words)
library(plotly)
runApp('foundation')
runApp('foundation')
runApp('foundation')
runApp('foundation')
runApp('foundation')
runApp('foundation')
runApp('foundation')
runApp('foundation')
runApp('foundation')
darkest_shades <- foundation_words %>%
arrange(desc(L)) %>%       # Sort by 'L' descending for darkest shades
head(15)                   # Select top 15
# For the top 15 lightest shades
lightest_shades <- foundation_words %>%
arrange(L)                 # Sort by 'L' ascending for lightest shades
head(15)
View(darkest_shades)
darkest_shades <- foundation_words %>%
arrange(L)                 # Sort by 'L' ascending for lightest shades
head(15)
lightest_shades <- foundation_words %>%
arrange(desc(L)) %>%       # Sort by 'L' descending for darkest shades
head(15)
View(lightest_shades)
?arrange
darkest_shades <- foundation_words %>%
arrange(L) %>%
head(15)
View(darkest_shades)
runApp('foundation')
runApp('foundation')
View(darkest_shades)
runApp('foundation')
runApp('foundation')
write.csv(foundation_words, "foundation_words.csv")
runApp('foundation')
View(lightest_shades)
runApp('foundation')
runApp('foundation')
View(foundation_words)
runApp('foundation')
View(foundation_words)
View(foundation)
View(foundation)
View(foundation_words)
View(foundation$L)
View(hsl_values)
View(rgb_values)
View(darkest_shades)
View(rgb_values)
runApp('foundation')
runApp('foundation')
runApp('foundation')
runApp('foundation')
runApp('foundation')
View(foundation)
length(unique(foundation$Brand))
length(unique(foundation$ProductName))
length(unique(foundation_words$ProductName))
length(unique(foundation_words$Brand))
View(foundation_words)
runApp('foundation')
runApp('foundation')
runApp('foundation')
hsl_values <-rgb2hsl(rgb_values)
pacman::p_load(
dplyr,
plotwidgets,
stringr)
oundation<- read.csv("foundation_data.csv")
#removing redundant column and products that had NA's for shade colour (only 2)
foundation <- foundation %>% select(-X) %>% na.omit()
foundation<- read.csv("foundation_data.csv")
#removing redundant column and products that had NA's for shade colour (only 2)
foundation <- foundation %>% select(-X) %>% na.omit()
#some shade names had the size of the product, so i removed that from the name
foundation$ShadeName <- trimws(gsub("30 ML|30ML|32 ML", "", foundation$ShadeName))
#there were refills and travel sized products which are the same as full sized ones so i removed them as they're duplicates
foundation <- foundation[!grepl("refill|mini", foundation$ProductName, ignore.case = TRUE), ]
#to order shades from light to dark, i need the HSL value, specifically L (lightness)
#had to convert to RGB first and then to HSL
rgb_values <- col2rgb(foundation$ShadeColour)
hsl_values <-rgb2hsl(rgb_values)
foundation$L <- hsl_values[3,]
write.csv(foundation, "foundation_all_clean.csv")
#creating csv for products that only has words in their name
foundation_words <- foundation %>%
mutate(
#removing all numbers in the shade name
ShadeWords = str_remove_all(ShadeName, "\\d+\\.\\d+|\\d+"),
#shade names with just numbers will be coded as NA and removed from dataframe
ShadeWords = na_if(ShadeWords, "")
) %>%
na.omit() %>%
select(-ShadeName)
#cleaning the foundation_words dataframe
#these were brands that did not use words to describe their shades but still had words, e.g. 'SHADE 1'
foundation_words <- foundation_words[!grepl("Charlotte|Anastasia|Glossier|Terry|Lisa|KOSAS|ROSE|MONIKA|RARE|KEVYN|WESTMAN",
foundation_words$Brand, ignore.case = TRUE), ]
#this product was named 'SHADE 1' , 'SHADE 2' and was therefore removed as it is a number based system
foundation_words <- foundation_words[!grepl("ReEvolve Natural Finish Foundation",
foundation_words$ProductName, ignore.case = TRUE), ]
#some shades have standalone letters like "N" , "C" or "N+" before the name, which stand for neutral or cool, which i decided to remove
foundation_words$ShadeWords <- foundation_words$ShadeWords %>%
str_remove_all("\\b[N|C|W|B|O|R]\\b") %>%
str_remove_all("\\bSF\\b|\\bNR\\b|\\bST\\b|\\bOB\\b|\\bOC\\b|\\bOR\\b|\\bFE\\b") %>%
str_remove_all("[\\+\\.]") %>%
str_squish()
#creating the top 15 lightest shades dataframe
lightest_shades <- foundation_words %>%
arrange(desc(L)) %>%
head(15)
##creating the top 15 darkest shades dataframe
darkest_shades <- foundation_words %>%
arrange(L) %>%
head(15)
write.csv(foundation_words, "foundation_words.csv")
runApp('foundation')
foundation<- read.csv("foundation_data.csv")
View(foundation)
#removing redundant column and products that had NA's for shade colour (only 2)
foundation <- foundation %>% select(-X) %>% na.omit()
#some shade names had the size of the product, so i removed that from the name
foundation$ShadeName <- trimws(gsub("30 ML|30ML|32 ML", "", foundation$ShadeName))
#there were refills and travel sized products which are the same as full sized ones so i removed them as they're duplicates
foundation <- foundation[!grepl("refill|mini", foundation$ProductName, ignore.case = TRUE), ]
#to order shades from light to dark, i need the HSL value, specifically L (lightness)
#had to convert to RGB first and then to HSL
rgb_values <- col2rgb(foundation$ShadeColour)
hsl_values <-rgb2hsl(rgb_values)
foundation$L <- hsl_values[3,]
shiny::runApp('SpaceNK-app')
setwd("~/Library/CloudStorage/OneDrive-UniversityCollegeLondon/Yr 2/comp.ss/SpaceNK")
shiny::runApp('SpaceNK-app')
runApp('SpaceNK-app')
runApp('SpaceNK-app')
install.packages('rsconnect')
rsconnect::setAccountInfo(name='chavon',
token='628DCA7CE4DB78579B868D9BE7EB7265',
secret='<SECRET>')
rsconnect::setAccountInfo(name='chavon',
token='628DCA7CE4DB78579B868D9BE7EB7265',
secret='<SECRET>')
rsconnect::setAccountInfo(name='chavon',
token='628DCA7CE4DB78579B868D9BE7EB7265',
secret= 'UNSE/F5RsOCJULUm8GG4i1jGSSQGCQsYxkMANEQU'
)
rsconnect::setAccountInfo(name='chavon', token='628DCA7CE4DB78579B868D9BE7EB7265', secret='UNSE/F5RsOCJULUm8GG4i1jGSSQGCQsYxkMANEQU')
library(rsconnect)
rsconnect::deployApp('path/to/your/app')
rlang::last_trace()
runApp('SpaceNK-app')
deployApp()
runApp('SpaceNK-app')
runApp('SpaceNK-app')
runApp('SpaceNK-app')
setwd("~/Pictures/OneDrive - University College London/Yr 2/comp.ss/SpaceNK")
